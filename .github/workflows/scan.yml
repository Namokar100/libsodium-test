name: CBOM Vulnerability Analysis with FastAPI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

env:
  CODEQL_VERSION: v2.21.2
  CODEQL_DIR: ${{ github.workspace }}/codeql
  CBOM_TOOL_DIR: ${{ github.workspace }}/.cbom-tool
  API_PORT: 8000

jobs:
  cbom-analysis:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Current Repository
      uses: actions/checkout@v4
      with:
        path: repo-to-analyze

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Essential Build Tools
      run: |
        sudo apt-get update -y
        sudo apt-get install -y --no-install-recommends \
          python3-dev python3-venv git curl build-essential

    - name: Install build dependencies
      run: |
        # Install basic build tools and compilers
        sudo apt-get install -y build-essential autoconf automake libtool pkg-config cmake
        sudo apt-get install -y gcc g++ clang make
        
        # Install required development libraries
        sudo apt-get install -y libssl-dev zlib1g-dev libnghttp2-dev
        sudo apt-get install -y libpsl-dev libidn2-dev libssh2-1-dev
        sudo apt-get install -y libkrb5-dev librtmp-dev libldap2-dev
        sudo apt-get install -y libgnutls28-dev libcurl4-openssl-dev
        
        # Install additional tools needed for libsodium
        sudo apt-get install -y libtool-bin
        sudo apt-get install -y python3 python3-pip
        sudo apt-get install -y jq
        
        # Verify tool versions
        gcc --version
        make --version
        automake --version
        autoconf --version
        libtool --version

    - name: Setup CodeQL CLI
      run: |
        mkdir -p $HOME/codeql-cli
        wget -q https://github.com/github/codeql-action/releases/download/codeql-bundle-v2.21.3/codeql-bundle-linux64.tar.gz -O codeql-bundle.tar.gz
        tar -xzf codeql-bundle.tar.gz -C $HOME/codeql-cli
        CODEQL_PATH=$(find $HOME/codeql-cli -name codeql -type f | head -n 1)
        CODEQL_DIR=$(dirname "$CODEQL_PATH")
        echo "CODEQL_PATH=${CODEQL_PATH}" >> $GITHUB_ENV
        echo "CODEQL_DIR=${CODEQL_DIR}" >> $GITHUB_ENV
        echo "${CODEQL_DIR}" >> $GITHUB_PATH
        "${CODEQL_PATH}" --version

    - name: Clone CBOM Analysis Tool
      uses: actions/checkout@v4
      with:
        repository: Namokar100/tool
        path: ${{ env.CBOM_TOOL_DIR }}
        token: ${{ secrets.PAT_TOKEN }}

    - name: Install CBOM Tool Dependencies
      run: |
        cd ${{ env.CBOM_TOOL_DIR }}
        python -m pip install --upgrade pip setuptools wheel
        python -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt
        pip install -e .

    - name: Start FastAPI Server
      run: |
        cd ${{ env.CBOM_TOOL_DIR }}
        source venv/bin/activate
        # Start the FastAPI server in the background
        python api_main.py &
        # Wait for the server to start
        sleep 10
        # Check if server is running
        curl http://localhost:${{ env.API_PORT }}/docs || (echo "Server failed to start" && exit 1)

    - name: Submit Analysis Request
      id: submit-analysis
      run: |
        cd ${{ env.CBOM_TOOL_DIR }}
        source venv/bin/activate
        
        # Get the absolute path of the repository to analyze
        REPO_PATH="${{ github.workspace }}"
        
        # Submit the analysis request using curl
        RESPONSE=$(curl -X POST http://localhost:${{ env.API_PORT }}/analyze/repository \
          -H "accept: application/json" \
          -H "Content-Type: application/json" \
          -d "{
            \"source_path\": \"${REPO_PATH}\",
            \"is_local_path\": true,
            \"build_command\": \"${CUSTOM_BUILD_COMMAND:-}\"
          }")
        
        # Extract analysis ID from response
        ANALYSIS_ID=$(echo $RESPONSE | python -c "import sys, json; print(json.load(sys.stdin)['analysis_id'])")
        echo "ANALYSIS_ID=${ANALYSIS_ID}" >> $GITHUB_ENV
        echo "Analysis ID: ${ANALYSIS_ID}"
        echo "Analyzing repository at path: ${REPO_PATH}"

    - name: Wait for Analysis Completion
      run: |
        cd ${{ env.CBOM_TOOL_DIR }}
        source venv/bin/activate
        
        MAX_ATTEMPTS=30
        ATTEMPT=0
        
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          RESPONSE=$(curl -s http://localhost:${{ env.API_PORT }}/analysis/${{ env.ANALYSIS_ID }}/status)
          STATUS=$(echo $RESPONSE | python -c "import sys, json; print(json.load(sys.stdin)['status'])")
          
          if [ "$STATUS" = "completed" ]; then
            echo "Analysis completed successfully"
            break
          elif [ "$STATUS" = "error" ]; then
            echo "Analysis failed"
            exit 1
          fi
          
          ATTEMPT=$((ATTEMPT + 1))
          echo "Waiting for analysis completion... Attempt $ATTEMPT of $MAX_ATTEMPTS"
          sleep 10
        done
        
        if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
          echo "Analysis timed out"
          exit 1
        fi

    - name: Download Analysis Results
      run: |
        cd ${{ env.CBOM_TOOL_DIR }}
        source venv/bin/activate
        
        mkdir -p ../analysis-results
        
        # Download CBOM
        curl -o ../analysis-results/cbom.json \
          http://localhost:${{ env.API_PORT }}/history/download/${{ env.ANALYSIS_ID }}/cbom.json
        
        # Download Compliance Report
        curl -o ../analysis-results/compliance_report.txt \
          http://localhost:${{ env.API_PORT }}/history/download/${{ env.ANALYSIS_ID }}/compliance_report.txt
        
        # Get Violations Report
        curl -o ../analysis-results/violations.json \
          http://localhost:${{ env.API_PORT }}/history/${{ env.ANALYSIS_ID }}/violations_report_json

    - name: Check for Vulnerabilities
      id: check-vulnerabilities
      run: |
        # Check if violations.json has any entries
        VIOLATIONS_COUNT=$(jq '.violations | length' analysis-results/violations.json)
        
        # Check both compliance report and violations.json
        if [ "$VIOLATIONS_COUNT" -gt 0 ] || grep -q "violations found" analysis-results/compliance_report.txt; then
          echo "has_vulnerabilities=true" >> $GITHUB_ENV
          echo "::warning::Security vulnerabilities were found in the analysis"
          echo "Found $VIOLATIONS_COUNT violations in the analysis"
          
          # Display detailed violations summary
          echo "Violation Details:"
          jq -r '.violations[] | "- Rule: \(.rule_id), Severity: \(.severity), File: \(.file_path), Line: \(.line_number)"' analysis-results/violations.json
        else
          echo "has_vulnerabilities=false" >> $GITHUB_ENV
          echo "No security vulnerabilities found"
        fi
    - name: Upload Analysis Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cbom-analysis-results
        path: |
          analysis-results/cbom.json
          analysis-results/compliance_report.txt
          analysis-results/violations.json
          violations_summary.txt
        retention-days: 7

    - name: Create Analysis Summary
      if: always()
      run: |
        cd ${{ github.workspace }}  # Change to workspace directory first
        
        echo "## CBOM Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "Analysis completed at: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "### Repository Analyzed" >> $GITHUB_STEP_SUMMARY
        echo "Repository: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "Branch: ${GITHUB_REF#refs/heads/}" >> $GITHUB_STEP_SUMMARY
        echo "Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        
        echo "### Security Violations Found" >> $GITHUB_STEP_SUMMARY
        
        # Process each violation and show code blocks
        if [ -f "analysis-results/violations.json" ]; then
          VIOLATIONS_COUNT=$(jq '.violations | length' analysis-results/violations.json)
          
          if [ "$VIOLATIONS_COUNT" -gt 0 ]; then
            echo "Total violations found: $VIOLATIONS_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            jq -c '.violations[]' analysis-results/violations.json | while read -r violation; do
              # Extract violation details
              rule_id=$(echo $violation | jq -r '.rule_id')
              severity=$(echo $violation | jq -r '.severity')
              description=$(echo $violation | jq -r '.description')
              file_path=$(echo $violation | jq -r '.file_path' | sed 's|^repo-to-analyze/||')
              line_number=$(echo $violation | jq -r '.line_number')
              
              # Write violation details
              echo "#### Violation in \`$file_path\` at line $line_number" >> $GITHUB_STEP_SUMMARY
              echo "- **Rule**: $rule_id" >> $GITHUB_STEP_SUMMARY
              echo "- **Severity**: $severity" >> $GITHUB_STEP_SUMMARY
              echo "- **Description**: $description" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              # Extract and show the relevant code block
              {
                echo "**Affected Code:**"
                echo '```c'  # Specify language for better syntax highlighting
                
                # Try all possible file locations
                if [ -f "repo-to-analyze/$file_path" ]; then
                  FILE_TO_READ="repo-to-analyze/$file_path"
                elif [ -f "$file_path" ]; then
                  FILE_TO_READ="$file_path"
                else
                  FILE_TO_READ=""
                fi
                
                if [ ! -z "$FILE_TO_READ" ]; then
                  start=$((line_number - 3))  # 3 lines before
                  end=$((line_number + 3))    # 3 lines after
                  if [ $start -lt 1 ]; then start=1; fi
                  
                  awk -v start="$start" -v end="$end" -v target="$line_number" '
                    NR >= start && NR <= end {
                      if (NR == target) {
                        printf "→ %d: %s\n", NR, $0
                      } else {
                        printf "  %d: %s\n", NR, $0
                      }
                    }
                  ' "$FILE_TO_READ"
                else
                  echo "File not found. Tried:"
                  echo "- ${{ github.workspace }}/repo-to-analyze/$file_path"
                  echo "- ${{ github.workspace }}/$file_path"
                  ls -la "${{ github.workspace }}/repo-to-analyze"  # Debug: List contents
                fi
                echo '```'
                echo ""
              } >> $GITHUB_STEP_SUMMARY
            done
            
            # Add statistics
            echo "### Violation Statistics" >> $GITHUB_STEP_SUMMARY
            echo "- Total violations: $VIOLATIONS_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- By severity:" >> $GITHUB_STEP_SUMMARY
            jq -r '.violations[] | .severity' analysis-results/violations.json | sort | uniq -c | while read -r count severity; do
              echo "  - $severity: $count" >> $GITHUB_STEP_SUMMARY
            done
            echo "" >> $GITHUB_STEP_SUMMARY
            
          else
            echo "No violations found." >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "No violations report found." >> $GITHUB_STEP_SUMMARY
        fi
        
        # Add a separator
        echo "---" >> $GITHUB_STEP_SUMMARY
        
        # Add link to full reports
        echo "### Full Reports" >> $GITHUB_STEP_SUMMARY
        echo "Detailed reports are available in the workflow artifacts:" >> $GITHUB_STEP_SUMMARY
        echo "- CBOM Report (cbom.json)" >> $GITHUB_STEP_SUMMARY
        echo "- Compliance Report (compliance_report.txt)" >> $GITHUB_STEP_SUMMARY
        echo "- Violations Report (violations.json)" >> $GITHUB_STEP_SUMMARY

    - name: Fail if Vulnerabilities Found
      if: env.has_vulnerabilities == 'true'
      run: |
        echo "Security vulnerabilities were found in the analysis"
        exit 1
